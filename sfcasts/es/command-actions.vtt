WEBVTT

00:00:01.096 --> 00:00:01.676 align:middle
¡Muy bien!

00:00:01.996 --> 00:00:06.046 align:middle
Estamos listos para añadir más acciones a nuestro
juego y permitir que los jugadores elijan sus acciones.

00:00:06.566 --> 00:00:09.206 align:middle
Primero, tenemos que crear una
interfaz para nuestros comandos.

00:00:09.696 --> 00:00:14.606 align:middle
Para ello, dentro del directorio ActionCommand,
vamos a crear un nuevo archivo PHP

00:00:14.606 --> 00:00:17.006 align:middle
y lo llamaremos ActionCommandInterface.

00:00:17.706 --> 00:00:21.126 align:middle
Dentro, añadiremos un único método
llamado execute() sin argumentos.

00:00:21.456 --> 00:00:22.456 align:middle
¡Interfaz terminada!

00:00:23.216 --> 00:00:27.476 align:middle
A continuación, abramos AttackCommand y
hagamos que implemente ActionCommandInterface.

00:00:27.966 --> 00:00:31.596 align:middle
El método execute() ya está implementado
aquí, así que ya está listo.

00:00:31.996 --> 00:00:36.696 align:middle
¡Qué bien! Si te has descargado el código del curso,
podemos ahorrarnos algo de tiempo cogiendo el resto

00:00:36.696 --> 00:00:40.436 align:middle
de acciones que necesitamos en nuestro directorio
tutorial en la raíz de nuestro proyecto.

00:00:41.096 --> 00:00:45.836 align:middle
Copia los archivos HealCommand y
SurrenderCommand en el directorio ActionCommand.

00:00:46.636 --> 00:00:47.536 align:middle
Vamos a comprobarlos.

00:00:47.996 --> 00:00:51.096 align:middle
Dentro de HealCommand, podemos
ver que tiene un constructor

00:00:51.096 --> 00:00:53.316 align:middle
que sólo se preocupa del objeto jugador.

00:00:53.686 --> 00:00:55.786 align:middle
Y en el método execute(),
tenemos algo de código

00:00:55.786 --> 00:00:59.796 align:middle
que calcula cuánto daño se curará el
jugador, y luego ajusta la salud del jugador

00:00:59.826 --> 00:01:02.406 align:middle
a la nueva cantidad (sin
exceder su salud máxima).

00:01:02.996 --> 00:01:05.156 align:middle
Por último, imprime un mensaje en la pantalla.

00:01:05.816 --> 00:01:09.316 align:middle
Si echamos un vistazo a SurrenderCommand,
el constructor aquí es el mismo que el

00:01:09.316 --> 00:01:12.416 align:middle
de HealCommand - sólo se
preocupa del objeto jugador.

00:01:13.056 --> 00:01:16.646 align:middle
Y en el método execute(), he hecho un poco
de trampa porque no hay una forma adecuada

00:01:16.646 --> 00:01:19.596 align:middle
de terminar una batalla, así que me he
limitado a poner la salud del jugador en 0.

00:01:20.056 --> 00:01:20.606 align:middle
Genial, ¿verdad?

00:01:21.166 --> 00:01:21.626 align:middle
¡Muy bien!

00:01:21.796 --> 00:01:24.326 align:middle
¡Es hora de pedir al jugador
que elija una acción!

00:01:24.876 --> 00:01:26.366 align:middle
Antes cerraré algunos archivos.

00:01:27.766 --> 00:01:30.026 align:middle
Bien, vuelve a GameApplication...

00:01:30.326 --> 00:01:35.046 align:middle
y justo antes de definir $playerAction,
escribe $actionChoice y pon lo

00:01:35.046 --> 00:01:39.616 align:middle
en GameApplication::$printer->choice(),
donde la pregunta es Your Turn,

00:01:39.886 --> 00:01:43.836 align:middle
y las opciones son Attack, Heal
y Surrender. A continuación,

00:01:44.866 --> 00:01:49.126 align:middle
sustituiremos la instanciación
AttackCommand por una expresión match,

00:01:49.456 --> 00:01:51.796 align:middle
pero cópiala primero, porque la
necesitaremos dentro de un momento.

00:01:52.586 --> 00:01:54.916 align:middle
Ahora escribe match ($actionChoice).

00:01:55.726 --> 00:01:59.726 align:middle
Dentro, el primer caso que queremos
añadir es Attack, y ahora...

00:01:59.856 --> 00:02:05.796 align:middle
pega. Para el segundo caso, escribe Heal
y ponlo en new HealCommand($player).

00:02:06.676 --> 00:02:11.466 align:middle
El tercer y último caso es Surrender, y lo
pondremos en new SurrenderCommand($player).

00:02:12.796 --> 00:02:14.716 align:middle
¡Perfecto! Vamos a probarlo.

00:02:15.106 --> 00:02:16.746 align:middle
Gira hasta tu terminal y ejecuta:

00:02:16.746 --> 00:02:23.726 align:middle
php bin/console app:game:play Esta
vez, seré un "mago arquero", y...

00:02:24.116 --> 00:02:24.646 align:middle
¡mira esto!

00:02:24.926 --> 00:02:26.146 align:middle
¡Nos pregunta qué hacer!

00:02:26.646 --> 00:02:28.956 align:middle
Ataquemos primero, y...

00:02:29.056 --> 00:02:34.996 align:middle
¡genial! Hicimos 12 puntos de daño y recibimos
10, así que nuestra salud actual es 40 de 50.

00:02:35.626 --> 00:02:36.926 align:middle
Intentemos curarnos a continuación.

00:02:37.536 --> 00:02:38.606 align:middle
Y... ¡fíjate!

00:02:38.986 --> 00:02:42.296 align:middle
Curamos 8 puntos, y la
IA hizo 0 puntos de daño

00:02:42.296 --> 00:02:45.486 align:middle
porque bloqueamos su ataque, así
que nuestra salud actual es 48.

00:02:46.096 --> 00:02:48.016 align:middle
¡La acción "curar" funciona como se esperaba!

00:02:48.716 --> 00:02:50.536 align:middle
Por último, intentemos rendirnos.

00:02:50.846 --> 00:02:52.376 align:middle
Elige la opción 2 y...

00:02:52.826 --> 00:02:55.196 align:middle
¡impresionante! Nos rendimos
y perdemos la partida. Rendirse

00:02:55.726 --> 00:02:58.926 align:middle
no es algo que normalmente
celebraríamos, pero en este caso,

00:02:58.926 --> 00:03:01.666 align:middle
significa que nuestra acción "rendirse" está
funcionando como se supone que debe hacerlo.

00:03:02.146 --> 00:03:05.936 align:middle
¡Choca esos cinco con tu patito de goma porque hemos
conseguido que nuestro juego sea más interactivo!

00:03:06.646 --> 00:03:10.926 align:middle
Pero... ¿no sería genial poder deshacer
nuestra última acción si, digamos...

00:03:11.006 --> 00:03:13.026 align:middle
¿la IA tuviera demasiada suerte?

00:03:13.486 --> 00:03:14.216 align:middle
¡Eso a continuación!
