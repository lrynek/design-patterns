WEBVTT

00:00:01.076 --> 00:00:03.126 align:middle
¿Listo para un nuevo episodio
de patrones de diseño?

00:00:03.586 --> 00:00:05.096 align:middle
Coge una taza de café y acomódate,

00:00:05.246 --> 00:00:08.066 align:middle
¡porque vamos a profundizar
en el patrón comando!

00:00:08.626 --> 00:00:11.126 align:middle
Empezaremos por lo básico:
la definición y la teoría.

00:00:11.616 --> 00:00:15.196 align:middle
Después, nos divertiremos aplicando lo
aprendido a nuestra aplicación de juego.

00:00:15.826 --> 00:00:19.566 align:middle
Empecemos por la pregunta más
obvia: ¿Qué es el patrón de mando?

00:00:20.086 --> 00:00:22.356 align:middle
El patrón comando es un
patrón de comportamiento.

00:00:22.836 --> 00:00:25.026 align:middle
Si has olvidado lo que eso significa, aquí
tienes un repaso. Los patrones de comportamiento

00:00:25.406 --> 00:00:29.306 align:middle
nos ayudan a diseñar clases con
responsabilidades específicas

00:00:29.306 --> 00:00:33.266 align:middle
que pueden trabajar juntas, en lugar de
poner todo ese código en una clase gigante.

00:00:33.856 --> 00:00:37.736 align:middle
La definición oficial de patrón de
comandos dice que "encapsulan una petición

00:00:37.736 --> 00:00:41.556 align:middle
como un objeto independiente,
permiten parametrizar clientes

00:00:41.556 --> 00:00:47.046 align:middle
con peticiones diferentes, poner en cola o registrar
peticiones, y admiten operaciones deshacibles"

00:00:47.566 --> 00:00:48.366 align:middle
¿Qué?

00:00:48.996 --> 00:00:51.696 align:middle
Vale, intentémoslo de nuevo con
una definición menos confusa. "

00:00:52.256 --> 00:00:57.206 align:middle
El patrón comando encapsula una tarea
en un objeto, desacoplando lo que hace,

00:00:57.456 --> 00:00:59.466 align:middle
cómo lo hace y cuándo lo hace.

00:00:59.966 --> 00:01:04.236 align:middle
También facilita deshacer acciones porque
puede mantener un historial de cambios"

00:01:04.806 --> 00:01:05.626 align:middle
¿Aún confuso?

00:01:05.926 --> 00:01:06.396 align:middle
No te preocupes

00:01:06.686 --> 00:01:08.926 align:middle
Esto tendrá mucho más sentido
cuando lo veamos en acción.

00:01:09.796 --> 00:01:14.616 align:middle
El patrón de comandos se compone de tres partes
principales: La primera es la "Interfaz de comandos",

00:01:14.786 --> 00:01:17.996 align:middle
que tiene un único método público
que suele llamarse execute().

00:01:18.576 --> 00:01:24.066 align:middle
En segundo lugar están los comandos concretos, que implementan
la Interfaz de Comandos y contienen la lógica de la tarea.

00:01:24.626 --> 00:01:28.876 align:middle
Por último, tiene un objeto invocador
que mantiene una referencia al comando y,

00:01:28.926 --> 00:01:30.766 align:middle
en algún momento, llama a execute().

00:01:31.446 --> 00:01:33.496 align:middle
Si has leído sobre esto en Internet,
te habrás dado cuenta de que no he

00:01:33.496 --> 00:01:37.326 align:middle
mencionado otras dos partes:
el receptor y el cliente.

00:01:37.856 --> 00:01:40.576 align:middle
El receptor es el objeto que
contiene la lógica de negocio,

00:01:40.576 --> 00:01:43.946 align:middle
y el cliente se encarga
de crear objetos comando.

00:01:44.576 --> 00:01:47.266 align:middle
En mi opinión, esos elementos
aumentan la complejidad del diseño

00:01:47.266 --> 00:01:49.556 align:middle
y no son supernecesarios.

00:01:50.026 --> 00:01:52.986 align:middle
Pueden ser útiles en aplicaciones
pesadas, orientadas a objetos,

00:01:53.046 --> 00:01:56.416 align:middle
para que las responsabilidades estén
mejor organizadas, pero en nuestro caso,

00:01:56.556 --> 00:01:58.826 align:middle
utilizarlos sobredimensionaría
nuestra aplicación.

00:01:59.266 --> 00:02:01.726 align:middle
Así que, por simplicidad, vamos a ignorarlos.

00:02:02.386 --> 00:02:06.296 align:middle
Bien, ahora que hemos cubierto el aspecto
teórico de las cosas, veamos un ejemplo.

00:02:06.796 --> 00:02:09.936 align:middle
Supongamos que queremos implementar un
mando a distancia para un televisor.

00:02:10.386 --> 00:02:15.126 align:middle
Nuestro mando a distancia tiene varios botones que nos permiten
interactuar con nuestro televisor, como subir o bajar el volumen

00:02:15.126 --> 00:02:17.766 align:middle
, encenderlo o apagarlo, etc.

00:02:18.296 --> 00:02:21.076 align:middle
Una forma fácil de hacerlo es
con una declaración switch-case,

00:02:21.366 --> 00:02:24.016 align:middle
donde cada caserepresenta la
acción de un botón con toda la

00:02:24.016 --> 00:02:25.916 align:middle
lógica que necesita para realizar esa acción.

00:02:26.416 --> 00:02:30.786 align:middle
Eso es bastante sencillo, pero a medida que añadamos
más y más botones, esto se va a complicar.

00:02:31.326 --> 00:02:35.756 align:middle
Es desordenado, difícil de mantener y no podremos
reutilizar este código en ningún otro sitio.

00:02:36.336 --> 00:02:38.166 align:middle
Tiene que haber una forma mejor de hacerlo...

00:02:38.486 --> 00:02:40.466 align:middle
y la hay: con el patrón de comandos.

00:02:40.956 --> 00:02:44.766 align:middle
Podemos agrupar la lógica de cada
botón en su propio objeto comando.

00:02:45.356 --> 00:02:48.726 align:middle
Entonces, en nuestro método pressButton(),
sólo tendríamos que llamar a execute()

00:02:48.726 --> 00:02:50.256 align:middle
en el comando que queramos ejecutar.

00:02:50.886 --> 00:02:55.886 align:middle
Se parece a esto La propiedad commands es
una matriz de objetos comando de botón,

00:02:56.056 --> 00:02:58.676 align:middle
cuya clave es una representación
de cadena del botón.

00:02:59.156 --> 00:03:02.316 align:middle
Al llamar a pressButton(), buscamos
el nombre del botón pasado

00:03:02.316 --> 00:03:04.376 align:middle
en esta matriz y llamamos a execute().

00:03:04.806 --> 00:03:05.396 align:middle
¡Muy útil!

00:03:05.926 --> 00:03:10.376 align:middle
Instanciar este objeto mando a distancia de TV (y
los comandos de botón), y luego utilizarlo , sería

00:03:10.436 --> 00:03:13.826 align:middle
algo parecido a esto: El
patrón de comandos es genial,

00:03:13.966 --> 00:03:15.996 align:middle
y ya podemos ver lo útil que puede ser.

00:03:16.446 --> 00:03:20.456 align:middle
Podemos añadir o eliminar botones sin tocar
el código de nuestro método pressButton(),

00:03:20.756 --> 00:03:23.846 align:middle
y toda la lógica está encapsulada
en clases separadas, lo que

00:03:24.176 --> 00:03:26.816 align:middle
facilita el mantenimiento y la
reutilización de nuestro código.

00:03:27.236 --> 00:03:31.366 align:middle
Y, como extra, hemos aplicado con
éxito el principio Abrir/Cerrar.

00:03:31.856 --> 00:03:35.666 align:middle
Ahora este método está abierto a
ampliaciones, pero cerrado a modificaciones.

00:03:36.456 --> 00:03:40.526 align:middle
A continuación: ¡Veamos el patrón comando en
acción e implementémoslo en nuestra aplicación!
